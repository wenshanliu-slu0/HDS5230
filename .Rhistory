# Calculate mortality rate
mortality_rate <- (deaths_count / alive_count) * 100
return(mortality_rate)
}
# Calculate mortality rates for each year between 2005 and 2018
calculate_mortality_rates <- function(start_year, end_year, patient.dt, mortality.dt) {
rates <- sapply(start_year:end_year, function(yr) {
get_mortality_rate(yr, patient.dt, mortality.dt)
})
years <- start_year:end_year
data.frame(Year = years, MortalityRate = rates)
}
# Example usage (replace patient.dt and mortality.dt with actual data tables)
# patient.dt <- data.table(PatientID = ..., FirstVisit = ...)
# mortality.dt <- data.table(PatientID = ..., DateOfDeath = ...)
mortality_rates <- calculate_mortality_rates(2005, 2018, patient.dt, mortality.dt)
# Function to get the start and end dates for a given year
get_interval <- function(yr) {
df <- list(
start.date = as.Date(paste0(yr, "-01-01")),
end.date = as.Date(paste0(yr, "-12-31"))
)
return(df)
}
# Function to calculate the mortality rate for a specific year
get_mortality_rate <- function(yr, patient.dt, mortality.dt) {
# Define the interval for the year
interval <- get_interval(yr)
# Filter deaths within the year
deaths.dt <- mortality.dt[
DateOfDeath >= interval$start.date & DateOfDeath <= interval$end.date
]
# Compute the alive patient records
alive.dt <- patient.dt[
!PatientID %in% mortality.dt[DateOfDeath < interval$start.date]$PatientID
]
# Join deaths with patients
deaths_count <- nrow(deaths.dt)
alive_count <- nrow(alive.dt)
# Avoid division by zero
if (alive_count == 0) {
mortality_rate <- 0
} else {
mortality_rate <- (deaths_count / alive_count) * 100
}
return(mortality_rate)
}
get_mortality_rate(2013)
library(data.table)
library(purrr)
library(testthat)
## Load the data
clinic.dt <- fread('./healthcare-data/Clinic.csv')
##Load Clinic
clinic.dt
test_that("Clinic loaded", { expect_equal(clinic.dt[,length(ClinicCode)], 60)})
test_that("Clinic loaded", { expect_equal(clinic.dt[,.N], 60)})
##Load DiseaseMap
diseasemap.dt <-fread('./healthcare-data/DiseaseMap.csv')
diseasemap.dt
test_that("Disease loaded", { expect_equal(diseasemap.dt[,.N],3419)})
##Load ICDCodes
icdcodes.dt <- fread('./healthcare-data/ICDCodes.csv')
icdcodes.dt
test_that("ICD10 loaded", { expect_equal(icdcodes.dt[,.N],3419)})
##Load InsuranceProvider
insuranceprov.dt <- fread('./healthcare-data/InsuranceProvider.csv')
insuranceprov.dt
test_that("Insurance loaded", { expect_equal(insuranceprov.dt[,.N],15)})
##Load Mortality
mortality.dt <-fread('./healthcare-data/Mortality.csv')
mortality.dt
test_that("Mortality loaded", { expect_equal(mortality.dt[,.N],7094)})
##Load Outpatient Visit
outpatient.visit.dt <- fread('./healthcare-data/OutpatientVisit.csv')
outpatient.visit.dt
test_that("Outpatient loaded", { expect_equal(outpatient.visit.dt [,.N],174690)})
## Load Patient
pateint.dt <- fread('./healthcare-data/Patient.csv')
pateint.dt
test_that("Patient loaded", { expect_equal(pateint.dt [,.N],20000)})
#1
## Merge patient and Mortality and compare that with patient
merged_data <- merge(pateint.dt, mortality.dt, by = "PatientID", all = FALSE)  # Inner join
merged_data
## results show that there is a difference - see the computations below
female.mort <- nrow(subset(merged_data, Gender == "female")) / nrow(subset(pateint.dt, Gender == "female")) *100
male.mort <- nrow(subset(merged_data, Gender == "male")) /nrow(subset(pateint.dt, Gender == "male")) *100
print(paste("female mort:", round(female.mort, 1), "%"))
print(paste("male mort:", round(male.mort, 1), "%"))
menMoreLikely = female.mort < male.mort # FALSE because female mort = 35.1%; male mort = 35.9%
test_that("men more likely to die", { expect_equal(menMoreLikely, TRUE)})
## 2. Combine Outputpatient with Disease on ICD10 code
# 1.Convert OutpatientVisit to long format
outpatient_long <- melt(outpatient.visit.dt,
id.vars = c("VisitID", "PatientID", "VisitDate", "StaffID", "ClinicCode"),
measure.vars = c("ICD10_1", "ICD10_2", "ICD10_3"),
variable.name = "ICD_Type",
value.name = "ICD10")
# Remove na in ICD10
outpatient_long <- outpatient_long[!is.na(ICD10)]
# 2. Merge with DiseaseMap table to map ICD10 codes to conditions
outpatient_condition <- merge(outpatient_long, diseasemap.dt, by = "ICD10", all.x = TRUE)
# 3. Add gender data (from Patient table)
gender_data <- pateint.dt[, .(PatientID, Gender)]
# Merge gender data with outpatient condition data
outpatient_gender <- merge(outpatient_condition, gender_data, by = "PatientID", all.x = TRUE)
# 4. Calculate disease rates by condition and gender
disease_rates <- outpatient_gender[, .(
Total = uniqueN(PatientID),
Male = uniqueN(PatientID[Gender == "male"]),
Female = uniqueN(PatientID[Gender == "emale"])
), by = Condition]
# Calculate the percentage rates for males, females, and overall
disease_rates[, `:=`(Rate_Male = round(100 * Male / Total, 2),
Rate_Female = round(100 * Female / Total, 2),
Rate_All = round(100 * Total / sum(Total), 2))]
# 5. print the result
summaries.dt <- disease_rates[, .(Condition, Rate_Male, Rate_Female, Rate_All)]
print(summaries.dt)
# Remove rows where Condition is NA
summaries.dt <- summaries.dt[!is.na(Condition)]
# Print the final result
print(summaries.dt)
summaries.dt
test_that("summaries populated", { expect_equal(summaries.dt [,.N],22)})
## 3.
str(mortality.dt)
mortality.dt
```{r}
## 3.
str(mortality.dt)
mortality.dt
get_interval <- function(yr){
df
return(df)
}
# yr <- 2013
# get_interval(yr)
#
# deaths.dt <- mortality.dt[DateOfDeath >= eval(get_interval(yr)$start.date) &
#                             DateOfDeath <= eval(get_interval(yr)$end.date)]
#
# patient.dt[deaths.dt, on="PatientID"]
#
# nrow(patient.dt[deaths.dt, on="PatientID"])/nrow(patient.dt) * 100
#
# ## compute the alive records - all those whose death was during or after the current year
# alive.dt <- mortality.dt[DateOfDeath >= eval(get_interval(yr)$start.date)]
#
# nrow(alive.dt[deaths.dt, on="PatientID"])/nrow(alive.dt) * 100
get_mortality_rate <- function(yr){
mortality_rate
return(mortality_rate)
}
get_mortality_rate(2013)
```{r}
# Function to get the start and end dates for a given year
get_interval <- function(yr) {
df <- list(
start.date = as.Date(paste0(yr, "-01-01")),
end.date = as.Date(paste0(yr, "-12-31"))
)
return(df)
}
# Function to calculate the mortality rate for a specific year
get_mortality_rate <- function(yr, patient.dt, mortality.dt) {
# Define the interval for the year
interval <- get_interval(yr)
# Filter deaths within the year
deaths.dt <- mortality.dt[
DateOfDeath >= interval$start.date & DateOfDeath <= interval$end.date
]
# Compute the alive patient records
alive.dt <- patient.dt[
!PatientID %in% mortality.dt[DateOfDeath < interval$start.date]$PatientID
]
# Join deaths with patients
deaths_count <- nrow(deaths.dt)
alive_count <- nrow(alive.dt)
# Avoid division by zero
if (alive_count == 0) {
mortality_rate <- 0
} else {
mortality_rate <- (deaths_count / alive_count) * 100
}
return(mortality_rate)
}
get_mortality_rate(2013)
# Function to get the start and end dates for a given year
get_interval <- function(yr) {
df <- list(
start.date = as.Date(paste0(yr, "-01-01")),
end.date = as.Date(paste0(yr, "-12-31"))
)
return(df)
}
# Function to calculate the mortality rate for a specific year
get_mortality_rate <- function(yr, patient.dt, mortality.dt) {
# Define the interval for the year
interval <- get_interval(yr)
# Filter deaths within the year
deaths.dt <- mortality.dt[
DateOfDeath >= interval$start.date & DateOfDeath <= interval$end.date
]
# Compute the alive patient records
alive.dt <- patient.dt[
!PatientID %in% mortality.dt[DateOfDeath < interval$start.date]$PatientID
]
# Join deaths with patients
deaths_count <- nrow(deaths.dt)
alive_count <- nrow(alive.dt)
# Avoid division by zero
if (alive_count == 0) {
mortality_rate <- 0
} else {
mortality_rate <- (deaths_count / alive_count) * 100
}
return(mortality_rate)
}
get_mortality_rate(2013)
# Function to get the start and end dates for a given year
get_interval <- function(yr) {
df <- list(
start.date = as.Date(paste0(yr, "-01-01")),
end.date = as.Date(paste0(yr, "-12-31"))
)
return(df)
}
# Function to calculate the mortality rate for a specific year
get_mortality_rate <- function(yr, patient.dt, mortality.dt) {
# Define the interval for the year
interval <- get_interval(yr)
# Filter deaths within the year
deaths.dt <- mortality.dt[
DateOfDeath >= interval$start.date & DateOfDeath <= interval$end.date
]
# Compute the alive patient records
alive.dt <- patient.dt[
!PatientID %in% mortality.dt[DateOfDeath < interval$start.date]$PatientID
]
# Join deaths with patients
deaths_count <- nrow(deaths.dt)
alive_count <- nrow(alive.dt)
# Avoid division by zero
if (alive_count == 0) {
mortality_rate <- 0
} else {
mortality_rate <- (deaths_count / alive_count) * 100
}
return(mortality_rate)
}
get_mortality_rate(2013, patient.dt, mortality.dt)
# Function to get the start and end dates for a given year
get_interval <- function(yr) {
df <- list(
start.date = as.Date(paste0(yr, "-01-01")),
end.date = as.Date(paste0(yr, "-12-31"))
)
return(df)
}
# Function to calculate the mortality rate for a specific year
get_mortality_rate <- function(yr, patient.dt, mortality.dt) {
# Define the interval for the year
interval <- get_interval(yr)
# Filter deaths within the year
deaths.dt <- mortality.dt[
DateOfDeath >= interval$start.date & DateOfDeath <= interval$end.date
]
# Compute the alive patient records
alive.dt <- patient.dt[
!PatientID %in% mortality.dt[DateOfDeath < interval$start.date]$PatientID
]
# Join deaths with patients
deaths_count <- nrow(deaths.dt)
alive_count <- nrow(alive.dt)
# Avoid division by zero
if (alive_count == 0) {
mortality_rate <- 0
} else {
mortality_rate <- (deaths_count / alive_count) * 100
}
return(mortality_rate)
}
get_mortality_rate(2013, patient.dt=patient.dt , mortality.dt =mortality.dt)
# Function to get the start and end dates for a given year
get_interval <- function(yr) {
df <- list(
start.date = as.Date(paste0(yr, "-01-01")),
end.date = as.Date(paste0(yr, "-12-31"))
)
return(df)
}
# Function to calculate the mortality rate for a specific year
get_mortality_rate <- function(yr, patient.dt, mortality.dt) {
# Define the interval for the year
interval <- get_interval(yr)
# Filter deaths within the year
deaths.dt <- mortality.dt[
DateOfDeath >= interval$start.date & DateOfDeath <= interval$end.date
]
# Compute the alive patient records
alive.dt <- patient.dt[
!PatientID %in% mortality.dt[DateOfDeath < interval$start.date]$PatientID
]
# Join deaths with patients
deaths_count <- nrow(deaths.dt)
alive_count <- nrow(alive.dt)
# Avoid division by zero
if (alive_count == 0) {
mortality_rate <- 0
} else {
mortality_rate <- (deaths_count / alive_count) * 100
}
return(mortality_rate)
}
get_mortality_rate(2013)
patient.dt
View(pateint.dt)
mortality.dt
pateint.dt
# Function to get the start and end dates for a given year
get_interval <- function(yr) {
df <- list(
start.date = as.Date(paste0(yr, "-01-01")),
end.date = as.Date(paste0(yr, "-12-31"))
)
return(df)
}
# Function to calculate the mortality rate for a specific year
get_mortality_rate <- function(yr, pateint.dt, mortality.dt) {
# Define the interval for the year
interval <- get_interval(yr)
# Filter deaths within the year
deaths.dt <- mortality.dt[
DateOfDeath >= interval$start.date & DateOfDeath <= interval$end.date
]
# Compute the alive patient records
alive.dt <- pateint.dt[
!PatientID %in% mortality.dt[DateOfDeath < interval$start.date]$PatientID
]
# Join deaths with patients
deaths_count <- nrow(deaths.dt)
alive_count <- nrow(alive.dt)
# Avoid division by zero
if (alive_count == 0) {
mortality_rate <- 0
} else {
mortality_rate <- (deaths_count / alive_count) * 100
}
return(mortality_rate)
}
get_mortality_rate(2013)
pateint.dt
mortality.dt
# Function to get the start and end dates for a given year
get_interval <- function(yr) {
df <- list(
start.date = as.Date(paste0(yr, "-01-01")),
end.date = as.Date(paste0(yr, "-12-31"))
)
return(df)
}
# Function to calculate the mortality rate for a specific year
get_mortality_rate <- function(yr, pateint.dt, mortality.dt) {
# Define the interval for the year
interval <- get_interval(yr)
# Filter deaths within the year
deaths.dt <- mortality.dt[
DateOfDeath >= interval$start.date & DateOfDeath <= interval$end.date
]
# Compute the alive patient records
alive.dt <- pateint.dt[
!PatientID %in% mortality.dt[DateOfDeath < interval$start.date]$PatientID
]
# Join deaths with patients
deaths_count <- nrow(deaths.dt)
alive_count <- nrow(alive.dt)
# Avoid division by zero
if (alive_count == 0) {
mortality_rate <- 0
} else {
mortality_rate <- (deaths_count / alive_count) * 100
}
return(mortality_rate)
}
get_mortality_rate(2013)
# Function to get the start and end dates for a given year
get_interval <- function(yr) {
df <- list(
start.date = as.Date(paste0(yr, "-01-01")),
end.date = as.Date(paste0(yr, "-12-31"))
)
return(df)
}
# Function to calculate the mortality rate for a specific year
get_mortality_rate <- function(yr, pateint.dt, mortality.dt) {
# Define the interval for the year
interval <- get_interval(yr)
# Filter deaths within the year
deaths.dt <- mortality.dt[
DateOfDeath >= interval$start.date & DateOfDeath <= interval$end.date
]
# Compute the alive patient records
alive.dt <- pateint.dt[
!PatientID %in% mortality.dt[DateOfDeath < interval$start.date]$PatientID
]
# Join deaths with patients
deaths_count <- nrow(deaths.dt)
alive_count <- nrow(alive.dt)
# Avoid division by zero
if (alive_count == 0) {
mortality_rate <- 0
} else {
mortality_rate <- (deaths_count / alive_count) * 100
}
return(mortality_rate)
}
get_mortality_rate(2013, patient.dt = patient.dt, mortality.dt = mortality.dt)
# Function to get the start and end dates for a given year
get_interval <- function(yr) {
df <- list(
start.date = as.Date(paste0(yr, "-01-01")),
end.date = as.Date(paste0(yr, "-12-31"))
)
return(df)
}
get_mortality_rate <- function(yr, patient.dt = patient.dt, mortality.dt = mortality.dt) {
# Define the interval for the year
interval <- get_interval(yr)
# Filter deaths within the year
deaths.dt <- mortality.dt[
DateOfDeath >= interval$start.date & DateOfDeath <= interval$end.date
]
# Compute the alive patient records
alive.dt <- patient.dt[
!PatientID %in% mortality.dt[DateOfDeath < interval$start.date]$PatientID
]
# Join deaths with patients
deaths_count <- nrow(deaths.dt)
alive_count <- nrow(alive.dt)
# Avoid division by zero
if (alive_count == 0) {
mortality_rate <- 0
} else {
mortality_rate <- (deaths_count / alive_count) * 100
}
return(mortality_rate)
}
get_mortality_rate(2013)
# Function to get the start and end dates for a given year
get_interval <- function(yr) {
df <- list(
start.date = as.Date(paste0(yr, "-01-01")),
end.date = as.Date(paste0(yr, "-12-31"))
)
return(df)
}
get_mortality_rate <- function(yr, patient.dt = patient.dt, mortality.dt = mortality.dt) {
# Define the interval for the year
interval <- get_interval(yr)
# Filter deaths within the year
deaths.dt <- mortality.dt[
DateOfDeath >= interval$start.date & DateOfDeath <= interval$end.date
]
# Compute the alive patient records
alive.dt <- patient.dt[
!PatientID %in% mortality.dt[DateOfDeath < interval$start.date]$PatientID
]
# Join deaths with patients
deaths_count <- nrow(deaths.dt)
alive_count <- nrow(alive.dt)
# Avoid division by zero
if (alive_count == 0) {
mortality_rate <- 0
} else {
mortality_rate <- (deaths_count / alive_count) * 100
}
return(mortality_rate)
}
mortality_rate_2013 <- get_mortality_rate(2013, patient.dt = patient.dt, mortality.dt = mortality.dt)
# Function to get the start and end dates for a given year
get_interval <- function(yr) {
df <- list(
start.date = as.Date(paste0(yr, "-01-01")),
end.date = as.Date(paste0(yr, "-12-31"))
)
return(df)
}
get_mortality_rate <- function(yr, patient.dt, mortality.dt) {
# Define the interval for the year
interval <- get_interval(yr)
# Filter deaths within the year
deaths.dt <- mortality.dt[
DateOfDeath >= interval$start.date & DateOfDeath <= interval$end.date
]
# Compute the alive patient records
alive.dt <- patient.dt[
!PatientID %in% mortality.dt[DateOfDeath < interval$start.date]$PatientID
]
# Join deaths with patients
deaths_count <- nrow(deaths.dt)
alive_count <- nrow(alive.dt)
# Avoid division by zero
if (alive_count == 0) {
mortality_rate <- 0
} else {
mortality_rate <- (deaths_count / alive_count) * 100
}
return(mortality_rate)
}
mortality_rate_2013 <- get_mortality_rate(2013, patient.dt = patient.dt, mortality.dt = mortality.dt)
